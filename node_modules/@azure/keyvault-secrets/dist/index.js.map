{"version":3,"file":"index.js","sources":["../src/log.ts","../src/core/models/mappers.ts","../src/core/models/parameters.ts","../src/core/keyVaultClientContext.ts","../src/core/keyVaultClient.ts","../src/core/utils/constants.ts","../src/core/challengeBasedAuthenticationPolicy.ts","../src/lro/delete/operation.ts","../src/lro/delete/poller.ts","../src/lro/recover/operation.ts","../src/lro/recover/poller.ts","../src/core/utils.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"keyvault-secrets\");\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const Attributes: coreHttp.CompositeMapper = {\n  serializedName: \"Attributes\",\n  type: {\n    name: \"Composite\",\n    className: \"Attributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      notBefore: {\n        serializedName: \"nbf\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      expires: {\n        serializedName: \"exp\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const JsonWebKey: coreHttp.CompositeMapper = {\n  serializedName: \"JsonWebKey\",\n  type: {\n    name: \"Composite\",\n    className: \"JsonWebKey\",\n    modelProperties: {\n      kid: {\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kty: {\n        serializedName: \"kty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      n: {\n        serializedName: \"n\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      e: {\n        serializedName: \"e\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      d: {\n        serializedName: \"d\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      dp: {\n        serializedName: \"dp\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      dq: {\n        serializedName: \"dq\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      qi: {\n        serializedName: \"qi\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      p: {\n        serializedName: \"p\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      q: {\n        serializedName: \"q\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      k: {\n        serializedName: \"k\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      t: {\n        serializedName: \"key_hsm\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      crv: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x: {\n        serializedName: \"x\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      y: {\n        serializedName: \"y\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"KeyAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyBundle: coreHttp.CompositeMapper = {\n  serializedName: \"KeyBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyBundle\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyItem: coreHttp.CompositeMapper = {\n  serializedName: \"KeyItem\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyItem\",\n    modelProperties: {\n      kid: {\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyBundle\",\n    modelProperties: {\n      ...KeyBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyItem\",\n    modelProperties: {\n      ...KeyItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"SecretAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretBundle: coreHttp.CompositeMapper = {\n  serializedName: \"SecretBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretBundle\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretItem: coreHttp.CompositeMapper = {\n  serializedName: \"SecretItem\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretBundle\",\n    modelProperties: {\n      ...SecretBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretItem\",\n    modelProperties: {\n      ...SecretItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretRestoreParameters\",\n    modelProperties: {\n      secretBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageRestoreParameters\",\n    modelProperties: {\n      storageBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateItem: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateItem\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      x509Thumbprint: {\n        serializedName: \"x5t\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerItem: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerItem\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyProperties: coreHttp.CompositeMapper = {\n  serializedName: \"KeyProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyProperties\",\n    modelProperties: {\n      exportable: {\n        serializedName: \"exportable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      keyType: {\n        serializedName: \"kty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keySize: {\n        serializedName: \"key_size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      reuseKey: {\n        serializedName: \"reuse_key\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      curve: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretProperties: coreHttp.CompositeMapper = {\n  serializedName: \"SecretProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretProperties\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SubjectAlternativeNames: coreHttp.CompositeMapper = {\n  serializedName: \"SubjectAlternativeNames\",\n  type: {\n    name: \"Composite\",\n    className: \"SubjectAlternativeNames\",\n    modelProperties: {\n      emails: {\n        serializedName: \"emails\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      dnsNames: {\n        serializedName: \"dns_names\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      upns: {\n        serializedName: \"upns\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const X509CertificateProperties: coreHttp.CompositeMapper = {\n  serializedName: \"X509CertificateProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"X509CertificateProperties\",\n    modelProperties: {\n      subject: {\n        serializedName: \"subject\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ekus: {\n        serializedName: \"ekus\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      subjectAlternativeNames: {\n        serializedName: \"sans\",\n        type: {\n          name: \"Composite\",\n          className: \"SubjectAlternativeNames\"\n        }\n      },\n      keyUsage: {\n        serializedName: \"key_usage\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      validityInMonths: {\n        serializedName: \"validity_months\",\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Trigger: coreHttp.CompositeMapper = {\n  serializedName: \"Trigger\",\n  type: {\n    name: \"Composite\",\n    className: \"Trigger\",\n    modelProperties: {\n      lifetimePercentage: {\n        serializedName: \"lifetime_percentage\",\n        constraints: {\n          InclusiveMaximum: 99,\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      },\n      daysBeforeExpiry: {\n        serializedName: \"days_before_expiry\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Action: coreHttp.CompositeMapper = {\n  serializedName: \"Action\",\n  type: {\n    name: \"Composite\",\n    className: \"Action\",\n    modelProperties: {\n      actionType: {\n        serializedName: \"action_type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"EmailContacts\", \"AutoRenew\"]\n        }\n      }\n    }\n  }\n};\n\nexport const LifetimeAction: coreHttp.CompositeMapper = {\n  serializedName: \"LifetimeAction\",\n  type: {\n    name: \"Composite\",\n    className: \"LifetimeAction\",\n    modelProperties: {\n      trigger: {\n        serializedName: \"trigger\",\n        type: {\n          name: \"Composite\",\n          className: \"Trigger\"\n        }\n      },\n      action: {\n        serializedName: \"action\",\n        type: {\n          name: \"Composite\",\n          className: \"Action\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerParameters: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerParameters\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificateType: {\n        serializedName: \"cty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificateTransparency: {\n        serializedName: \"cert_transparency\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificatePolicy: coreHttp.CompositeMapper = {\n  serializedName: \"CertificatePolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificatePolicy\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyProperties: {\n        serializedName: \"key_props\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyProperties\"\n        }\n      },\n      secretProperties: {\n        serializedName: \"secret_props\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretProperties\"\n        }\n      },\n      x509CertificateProperties: {\n        serializedName: \"x509_props\",\n        type: {\n          name: \"Composite\",\n          className: \"X509CertificateProperties\"\n        }\n      },\n      lifetimeActions: {\n        serializedName: \"lifetime_actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LifetimeAction\"\n            }\n          }\n        }\n      },\n      issuerParameters: {\n        serializedName: \"issuer\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerParameters\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateBundle: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sid: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x509Thumbprint: {\n        readOnly: true,\n        serializedName: \"x5t\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      policy: {\n        readOnly: true,\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      cer: {\n        serializedName: \"cer\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateBundle\",\n    modelProperties: {\n      ...CertificateBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateItem\",\n    modelProperties: {\n      ...CertificateItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreHttp.CompositeMapper = {\n  serializedName: \"Error\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      code: {\n        readOnly: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        readOnly: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innerError: {\n        readOnly: true,\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateOperation: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateOperation\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateOperation\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      issuerParameters: {\n        serializedName: \"issuer\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerParameters\"\n        }\n      },\n      csr: {\n        serializedName: \"csr\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      cancellationRequested: {\n        serializedName: \"cancellation_requested\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusDetails: {\n        serializedName: \"status_details\",\n        type: {\n          name: \"String\"\n        }\n      },\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"request_id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerCredentials: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerCredentials\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerCredentials\",\n    modelProperties: {\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"pwd\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AdministratorDetails: coreHttp.CompositeMapper = {\n  serializedName: \"AdministratorDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"AdministratorDetails\",\n    modelProperties: {\n      firstName: {\n        serializedName: \"first_name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastName: {\n        serializedName: \"last_name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      emailAddress: {\n        serializedName: \"email\",\n        type: {\n          name: \"String\"\n        }\n      },\n      phone: {\n        serializedName: \"phone\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OrganizationDetails: coreHttp.CompositeMapper = {\n  serializedName: \"OrganizationDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"OrganizationDetails\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      adminDetails: {\n        serializedName: \"admin_details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AdministratorDetails\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerBundle: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const Contact: coreHttp.CompositeMapper = {\n  serializedName: \"Contact\",\n  type: {\n    name: \"Composite\",\n    className: \"Contact\",\n    modelProperties: {\n      emailAddress: {\n        serializedName: \"email\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      phone: {\n        serializedName: \"phone\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Contacts: coreHttp.CompositeMapper = {\n  serializedName: \"Contacts\",\n  type: {\n    name: \"Composite\",\n    className: \"Contacts\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contactList: {\n        serializedName: \"contacts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Contact\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyCreateParameters\",\n    modelProperties: {\n      kty: {\n        required: true,\n        serializedName: \"kty\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      keySize: {\n        serializedName: \"key_size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      curve: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyImportParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyImportParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyImportParameters\",\n    modelProperties: {\n      hsm: {\n        serializedName: \"Hsm\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      key: {\n        required: true,\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyOperationsParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyOperationsParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyOperationsParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeySignParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeySignParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeySignParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVerifyParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVerifyParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVerifyParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      digest: {\n        required: true,\n        serializedName: \"digest\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      signature: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyUpdateParameters\",\n    modelProperties: {\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyRestoreParameters\",\n    modelProperties: {\n      keyBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretSetParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretSetParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretSetParameters\",\n    modelProperties: {\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretUpdateParameters\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateCreateParameters\",\n    modelProperties: {\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateImportParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateImportParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateImportParameters\",\n    modelProperties: {\n      base64EncodedCertificate: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"pwd\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateUpdateParameters\",\n    modelProperties: {\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateMergeParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateMergeParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateMergeParameters\",\n    modelProperties: {\n      x509Certificates: {\n        required: true,\n        serializedName: \"x5c\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"ByteArray\"\n            }\n          }\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerSetParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerSetParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerSetParameters\",\n    modelProperties: {\n      provider: {\n        required: true,\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerUpdateParameters\",\n    modelProperties: {\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateOperationUpdateParameter: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateOperationUpdateParameter\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateOperationUpdateParameter\",\n    modelProperties: {\n      cancellationRequested: {\n        required: true,\n        serializedName: \"cancellation_requested\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyOperationResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyOperationResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyOperationResult\",\n    modelProperties: {\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVerifyResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVerifyResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVerifyResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyListResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"KeyItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedKeyItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretListResult: coreHttp.CompositeMapper = {\n  serializedName: \"SecretListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SecretItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedSecretItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateListResult: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CertificateItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedCertificateItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerListResult: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CertificateIssuerItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupKeyResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupKeyResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupKeyResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupSecretResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupSecretResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupSecretResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupStorageResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupStorageResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupStorageResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const PendingCertificateSigningRequestResult: coreHttp.CompositeMapper = {\n  serializedName: \"PendingCertificateSigningRequestResult\",\n  type: {\n    name: \"Composite\",\n    className: \"PendingCertificateSigningRequestResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageBundle: coreHttp.CompositeMapper = {\n  serializedName: \"StorageBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceId: {\n        readOnly: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      activeKeyName: {\n        readOnly: true,\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        readOnly: true,\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        readOnly: true,\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageBundle\",\n    modelProperties: {\n      ...StorageBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountCreateParameters\",\n    modelProperties: {\n      resourceId: {\n        required: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      activeKeyName: {\n        required: true,\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        required: true,\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      storageAccountAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountUpdateParameters\",\n    modelProperties: {\n      activeKeyName: {\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      storageAccountAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountRegenerteKeyParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountRegenerteKeyParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountRegenerteKeyParameters\",\n    modelProperties: {\n      keyName: {\n        required: true,\n        serializedName: \"keyName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountItem: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountItem\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountItem\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceId: {\n        readOnly: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageAccountItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageAccountItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageAccountItem\",\n    modelProperties: {\n      ...StorageAccountItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageListResult: coreHttp.CompositeMapper = {\n  serializedName: \"StorageListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"StorageAccountItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedStorageAccountItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionBundle: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretId: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      templateUri: {\n        readOnly: true,\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        readOnly: true,\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        readOnly: true,\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionBundle\",\n    modelProperties: {\n      ...SasDefinitionBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionItem: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionItem\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionItem\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretId: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionItem\",\n    modelProperties: {\n      ...SasDefinitionItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionListResult: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SasDefinitionItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedSasDefinitionItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionCreateParameters\",\n    modelProperties: {\n      templateUri: {\n        required: true,\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        required: true,\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        required: true,\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasDefinitionAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionUpdateParameters\",\n    modelProperties: {\n      templateUri: {\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasDefinitionAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVaultError: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVaultError\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVaultError\",\n    modelProperties: {\n      error: {\n        readOnly: true,\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateRestoreParameters\",\n    modelProperties: {\n      certificateBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupCertificateResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupCertificateResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupCertificateResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const apiVersion: coreHttp.OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateName\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateName\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const includePending: coreHttp.OperationQueryParameter = {\n  parameterPath: [\"options\", \"includePending\"],\n  mapper: {\n    serializedName: \"includePending\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const issuerName: coreHttp.OperationURLParameter = {\n  parameterPath: \"issuerName\",\n  mapper: {\n    required: true,\n    serializedName: \"issuer-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyName\",\n  mapper: {\n    required: true,\n    serializedName: \"key-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyName\",\n  mapper: {\n    required: true,\n    serializedName: \"key-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"key-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const maxresults: coreHttp.OperationQueryParameter = {\n  parameterPath: [\"options\", \"maxresults\"],\n  mapper: {\n    serializedName: \"maxresults\",\n    constraints: {\n      InclusiveMaximum: 25,\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const sasDefinitionName: coreHttp.OperationURLParameter = {\n  parameterPath: \"sasDefinitionName\",\n  mapper: {\n    required: true,\n    serializedName: \"sas-definition-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretName\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretName\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const storageAccountName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"storageAccountName\",\n  mapper: {\n    required: true,\n    serializedName: \"storage-account-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const storageAccountName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"storageAccountName\",\n  mapper: {\n    required: true,\n    serializedName: \"storage-account-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const vaultBaseUrl: coreHttp.OperationURLParameter = {\n  parameterPath: \"vaultBaseUrl\",\n  mapper: {\n    required: true,\n    serializedName: \"vaultBaseUrl\",\n    defaultValue: \"\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"@azure/keyvault-secrets\";\nconst packageVersion = \"4.0.2\";\n\nexport class KeyVaultClientContext extends coreHttp.ServiceClient {\n  apiVersion: string;\n  credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the KeyVaultClientContext class.\n   * @param apiVersion Client API version.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    apiVersion: string,\n    options?: coreHttp.ServiceClientOptions\n  ) {\n    if (apiVersion == undefined) {\n      throw new Error(\"'apiVersion' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{vaultBaseUrl}\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.apiVersion = apiVersion;\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { KeyVaultClientContext } from \"./keyVaultClientContext\";\n\nclass KeyVaultClient extends KeyVaultClientContext {\n  /**\n   * Initializes a new instance of the KeyVaultClient class.\n   * @param apiVersion Client API version.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    apiVersion: string,\n    options?: coreHttp.ServiceClientOptions\n  ) {\n    super(credentials, apiVersion, options);\n  }\n\n  /**\n   * The create key operation can be used to create any key type in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   * @summary Creates a new key, stores it, then returns key parameters and attributes to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateKeyResponse>\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options?: Models.KeyVaultClientCreateKeyOptionalParams\n  ): Promise<Models.CreateKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param callback The callback\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options: Models.KeyVaultClientCreateKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options?:\n      | Models.KeyVaultClientCreateKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.CreateKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        kty,\n        options\n      },\n      createKeyOperationSpec,\n      callback\n    ) as Promise<Models.CreateKeyResponse>;\n  }\n\n  /**\n   * The import key operation may be used to import any key type into an Azure Key Vault. If the\n   * named key already exists, Azure Key Vault creates a new version of the key. This operation\n   * requires the keys/import permission.\n   * @summary Imports an externally created key, stores it, and returns key parameters and attributes\n   * to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ImportKeyResponse>\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options?: Models.KeyVaultClientImportKeyOptionalParams\n  ): Promise<Models.ImportKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param callback The callback\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options: Models.KeyVaultClientImportKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options?:\n      | Models.KeyVaultClientImportKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.ImportKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        key,\n        options\n      },\n      importKeyOperationSpec,\n      callback\n    ) as Promise<Models.ImportKeyResponse>;\n  }\n\n  /**\n   * The delete key operation cannot be used to remove individual versions of a key. This operation\n   * removes the cryptographic material associated with the key, which means the key is not usable\n   * for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the\n   * keys/delete permission.\n   * @summary Deletes a key of any type from storage in Azure Key Vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteKeyResponse>\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param callback The callback\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedKeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): Promise<Models.DeleteKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      deleteKeyOperationSpec,\n      callback\n    ) as Promise<Models.DeleteKeyResponse>;\n  }\n\n  /**\n   * In order to perform this operation, the key must already exist in the Key Vault. Note: The\n   * cryptographic material of a key itself cannot be changed. This operation requires the\n   * keys/update permission.\n   * @summary The update key operation changes specified attributes of a stored key and can be\n   * applied to any key type and key version stored in Azure Key Vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateKeyResponse>\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: Models.KeyVaultClientUpdateKeyOptionalParams\n  ): Promise<Models.UpdateKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param callback The callback\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options: Models.KeyVaultClientUpdateKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.UpdateKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        options\n      },\n      updateKeyOperationSpec,\n      callback\n    ) as Promise<Models.UpdateKeyResponse>;\n  }\n\n  /**\n   * The get key operation is applicable to all key types. If the requested key is symmetric, then no\n   * key material is released in the response. This operation requires the keys/get permission.\n   * @summary Gets the public part of a stored key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeyResponse>\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param callback The callback\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.GetKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        options\n      },\n      getKeyOperationSpec,\n      callback\n    ) as Promise<Models.GetKeyResponse>;\n  }\n\n  /**\n   * The full key identifier, attributes, and tags are provided in the response. This operation\n   * requires the keys/list permission.\n   * @summary Retrieves a list of individual key versions with the same key name.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeyVersionsResponse>\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: Models.KeyVaultClientGetKeyVersionsOptionalParams\n  ): Promise<Models.GetKeyVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: Models.KeyVaultClientGetKeyVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?:\n      | Models.KeyVaultClientGetKeyVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): Promise<Models.GetKeyVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      getKeyVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetKeyVersionsResponse>;\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a stored key. The LIST operation is applicable to all key types, however only the base\n   * key identifier, attributes, and tags are provided in the response. Individual versions of a key\n   * are not listed in the response. This operation requires the keys/list permission.\n   * @summary List keys in the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeysResponse>\n   */\n  getKeys(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetKeysOptionalParams\n  ): Promise<Models.GetKeysResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getKeys(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKeys(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetKeysOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  getKeys(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetKeysOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): Promise<Models.GetKeysResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getKeysOperationSpec,\n      callback\n    ) as Promise<Models.GetKeysResponse>;\n  }\n\n  /**\n   * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this\n   * operation does NOT return key material in a form that can be used outside the Azure Key Vault\n   * system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key\n   * Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure\n   * Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance.\n   * The BACKUP operation may be used to export, in protected form, any key type from Azure Key\n   * Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed\n   * within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be\n   * restored to another geographical area. For example, a backup from the US geographical area\n   * cannot be restored in an EU geographical area. This operation requires the key/backup\n   * permission.\n   * @summary Requests that a backup of the specified key be downloaded to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupKeyResponse>\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): void;\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupKeyResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): Promise<Models.BackupKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      backupKeyOperationSpec,\n      callback\n    ) as Promise<Models.BackupKeyResponse>;\n  }\n\n  /**\n   * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,\n   * attributes and access control policies. The RESTORE operation may be used to import a previously\n   * backed up key. Individual versions of a key cannot be restored. The key is restored in its\n   * entirety with the same key name as it had when it was backed up. If the key name is not\n   * available in the target Key Vault, the RESTORE operation will be rejected. While the key name is\n   * retained during restore, the final key identifier will change if the key is restored to a\n   * different vault. Restore will restore all versions and preserve version identifiers. The RESTORE\n   * operation is subject to security constraints: The target Key Vault must be owned by the same\n   * Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in\n   * the target Key Vault. This operation requires the keys/restore permission.\n   * @summary Restores a backed up key to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreKeyResponse>\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param callback The callback\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.RestoreKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyBundleBackup,\n        options\n      },\n      restoreKeyOperationSpec,\n      callback\n    ) as Promise<Models.RestoreKeyResponse>;\n  }\n\n  /**\n   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is\n   * stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data,\n   * the size of which is dependent on the target key and the encryption algorithm to be used. The\n   * ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since\n   * protection with an asymmetric key can be performed using public portion of the key. This\n   * operation is supported for asymmetric keys as a convenience for callers that have a\n   * key-reference but do not have access to the public key material. This operation requires the\n   * keys/encrypt permission.\n   * @summary Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key\n   * vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.EncryptResponse>\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.EncryptResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.EncryptResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      encryptOperationSpec,\n      callback\n    ) as Promise<Models.EncryptResponse>;\n  }\n\n  /**\n   * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key\n   * and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single\n   * block of data may be decrypted, the size of this block is dependent on the target key and the\n   * algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in\n   * Azure Key Vault since it uses the private portion of the key. This operation requires the\n   * keys/decrypt permission.\n   * @summary Decrypts a single block of encrypted data.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DecryptResponse>\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DecryptResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.DecryptResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      decryptOperationSpec,\n      callback\n    ) as Promise<Models.DecryptResponse>;\n  }\n\n  /**\n   * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault\n   * since this operation uses the private portion of the key. This operation requires the keys/sign\n   * permission.\n   * @summary Creates a signature from a digest using the specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SignResponse>\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.SignResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param callback The callback\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.SignResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      signOperationSpec,\n      callback\n    ) as Promise<Models.SignResponse>;\n  }\n\n  /**\n   * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not\n   * strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification\n   * can be performed using the public portion of the key but this operation is supported as a\n   * convenience for callers that only have a key-reference and not the public portion of the key.\n   * This operation requires the keys/verify permission.\n   * @summary Verifies a signature using a specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.VerifyResponse>\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.VerifyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param callback The callback\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): void;\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyVerifyResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): Promise<Models.VerifyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        digest,\n        signature,\n        options\n      },\n      verifyOperationSpec,\n      callback\n    ) as Promise<Models.VerifyResponse>;\n  }\n\n  /**\n   * The WRAP operation supports encryption of a symmetric key using a key encryption key that has\n   * previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for\n   * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be\n   * performed using the public portion of the key. This operation is supported for asymmetric keys\n   * as a convenience for callers that have a key-reference but do not have access to the public key\n   * material. This operation requires the keys/wrapKey permission.\n   * @summary Wraps a symmetric key using a specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.WrapKeyResponse>\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.WrapKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.WrapKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      wrapKeyOperationSpec,\n      callback\n    ) as Promise<Models.WrapKeyResponse>;\n  }\n\n  /**\n   * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key.\n   * This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric\n   * and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This\n   * operation requires the keys/unwrapKey permission.\n   * @summary Unwraps a symmetric key using the specified key that was initially used for wrapping\n   * that key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UnwrapKeyResponse>\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UnwrapKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.UnwrapKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      unwrapKeyOperationSpec,\n      callback\n    ) as Promise<Models.UnwrapKeyResponse>;\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a deleted key. This operation includes deletion-specific information. The Get Deleted\n   * Keys operation is applicable for vaults enabled for soft-delete. While the operation can be\n   * invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault.\n   * This operation requires the keys/list permission.\n   * @summary Lists the deleted keys in the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedKeysResponse>\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedKeysOptionalParams\n  ): Promise<Models.GetDeletedKeysResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedKeysOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): void;\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedKeysOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedKeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): Promise<Models.GetDeletedKeysResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedKeysOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedKeysResponse>;\n  }\n\n  /**\n   * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation\n   * can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled\n   * vault. This operation requires the keys/get permission.\n   * @summary Gets the public part of a deleted key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedKeyResponse>\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedKeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): Promise<Models.GetDeletedKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      getDeletedKeyOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedKeyResponse>;\n  }\n\n  /**\n   * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the\n   * operation can be invoked on any vault, it will return an error if invoked on a non soft-delete\n   * enabled vault. This operation requires the keys/purge permission.\n   * @summary Permanently deletes the specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param callback The callback\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      purgeDeletedKeyOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults.\n   * It recovers the deleted key back to its latest version under /keys. An attempt to recover an\n   * non-deleted key will return an error. Consider this the inverse of the delete operation on\n   * soft-delete enabled vaults. This operation requires the keys/recover permission.\n   * @summary Recovers the deleted key to its latest version.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedKeyResponse>\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param callback The callback\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.RecoverDeletedKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      recoverDeletedKeyOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedKeyResponse>;\n  }\n\n  /**\n   * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists,\n   * Azure Key Vault creates a new version of that secret. This operation requires the secrets/set\n   * permission.\n   * @summary Sets a secret in a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetSecretResponse>\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options?: Models.KeyVaultClientSetSecretOptionalParams\n  ): Promise<Models.SetSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param callback The callback\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options: Models.KeyVaultClientSetSecretOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options?:\n      | Models.KeyVaultClientSetSecretOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.SetSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        value,\n        options\n      },\n      setSecretOperationSpec,\n      callback\n    ) as Promise<Models.SetSecretResponse>;\n  }\n\n  /**\n   * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied\n   * to an individual version of a secret. This operation requires the secrets/delete permission.\n   * @summary Deletes a secret from a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteSecretResponse>\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedSecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): Promise<Models.DeleteSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      deleteSecretOperationSpec,\n      callback\n    ) as Promise<Models.DeleteSecretResponse>;\n  }\n\n  /**\n   * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that\n   * are not specified in the request are left unchanged. The value of a secret itself cannot be\n   * changed. This operation requires the secrets/set permission.\n   * @summary Updates the attributes associated with a specified secret in a given key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateSecretResponse>\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: Models.KeyVaultClientUpdateSecretOptionalParams\n  ): Promise<Models.UpdateSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param callback The callback\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options: Models.KeyVaultClientUpdateSecretOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateSecretOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.UpdateSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        secretVersion,\n        options\n      },\n      updateSecretOperationSpec,\n      callback\n    ) as Promise<Models.UpdateSecretResponse>;\n  }\n\n  /**\n   * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires\n   * the secrets/get permission.\n   * @summary Get a specified secret from a given key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretResponse>\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param callback The callback\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.GetSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        secretVersion,\n        options\n      },\n      getSecretOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretResponse>;\n  }\n\n  /**\n   * The Get Secrets operation is applicable to the entire vault. However, only the base secret\n   * identifier and its attributes are provided in the response. Individual secret versions are not\n   * listed in the response. This operation requires the secrets/list permission.\n   * @summary List secrets in a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretsResponse>\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetSecretsOptionalParams\n  ): Promise<Models.GetSecretsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetSecretsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  getSecrets(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetSecretsOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): Promise<Models.GetSecretsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getSecretsOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretsResponse>;\n  }\n\n  /**\n   * The full secret identifier and attributes are provided in the response. No values are returned\n   * for the secrets. This operations requires the secrets/list permission.\n   * @summary List all versions of the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretVersionsResponse>\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: Models.KeyVaultClientGetSecretVersionsOptionalParams\n  ): Promise<Models.GetSecretVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: Models.KeyVaultClientGetSecretVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?:\n      | Models.KeyVaultClientGetSecretVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): Promise<Models.GetSecretVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      getSecretVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretVersionsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled\n   * for soft-delete. This operation requires the secrets/list permission.\n   * @summary Lists deleted secrets for the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSecretsResponse>\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedSecretsOptionalParams\n  ): Promise<Models.GetDeletedSecretsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedSecretsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): void;\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedSecretsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedSecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): Promise<Models.GetDeletedSecretsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedSecretsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSecretsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.\n   * This operation requires the secrets/get permission.\n   * @summary Gets the specified deleted secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSecretResponse>\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedSecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): Promise<Models.GetDeletedSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      getDeletedSecretOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSecretResponse>;\n  }\n\n  /**\n   * The purge deleted secret operation removes the secret permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation\n   * requires the secrets/purge permission.\n   * @summary Permanently deletes the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      purgeDeletedSecretOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * Recovers the deleted secret in the specified vault. This operation can only be performed on a\n   * soft-delete enabled vault. This operation requires the secrets/recover permission.\n   * @summary Recovers the deleted secret to the latest version.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedSecretResponse>\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param callback The callback\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.RecoverDeletedSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      recoverDeletedSecretOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedSecretResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified secret be downloaded to the client. All versions of the\n   * secret will be downloaded. This operation requires the secrets/backup permission.\n   * @summary Backs up the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupSecretResponse>\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): void;\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupSecretResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): Promise<Models.BackupSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      backupSecretOperationSpec,\n      callback\n    ) as Promise<Models.BackupSecretResponse>;\n  }\n\n  /**\n   * Restores a backed up secret, and all its versions, to a vault. This operation requires the\n   * secrets/restore permission.\n   * @summary Restores a backed up secret to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreSecretResponse>\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param callback The callback\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.RestoreSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretBundleBackup,\n        options\n      },\n      restoreSecretOperationSpec,\n      callback\n    ) as Promise<Models.RestoreSecretResponse>;\n  }\n\n  /**\n   * The GetCertificates operation returns the set of certificates resources in the specified key\n   * vault. This operation requires the certificates/list permission.\n   * @summary List certificates in a specified key vault\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificatesResponse>\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetCertificatesOptionalParams\n  ): Promise<Models.GetCertificatesResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetCertificatesOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  getCertificates(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetCertificatesOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): Promise<Models.GetCertificatesResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificatesOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificatesResponse>;\n  }\n\n  /**\n   * Deletes all versions of a certificate object along with its associated policy. Delete\n   * certificate cannot be used to remove individual versions of a certificate object. This operation\n   * requires the certificates/delete permission.\n   * @summary Deletes a certificate from a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateResponse>\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedCertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): Promise<Models.DeleteCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      deleteCertificateOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateResponse>;\n  }\n\n  /**\n   * Sets the certificate contacts for the specified key vault. This operation requires the\n   * certificates/managecontacts permission.\n   * @summary Sets the certificate contacts for the specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetCertificateContactsResponse>\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.SetCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param callback The callback\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.SetCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        contacts,\n        options\n      },\n      setCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.SetCertificateContactsResponse>;\n  }\n\n  /**\n   * The GetCertificateContacts operation returns the set of certificate contact resources in the\n   * specified key vault. This operation requires the certificates/managecontacts permission.\n   * @summary Lists the certificate contacts for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateContactsResponse>\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.GetCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateContactsResponse>;\n  }\n\n  /**\n   * Deletes the certificate contacts for a specified key vault certificate. This operation requires\n   * the certificates/managecontacts permission.\n   * @summary Deletes the certificate contacts for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateContactsResponse>\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.DeleteCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      deleteCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateContactsResponse>;\n  }\n\n  /**\n   * The GetCertificateIssuers operation returns the set of certificate issuer resources in the\n   * specified key vault. This operation requires the certificates/manageissuers/getissuers\n   * permission.\n   * @summary List certificate issuers for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateIssuersResponse>\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetCertificateIssuersOptionalParams\n  ): Promise<Models.GetCertificateIssuersResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetCertificateIssuersOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): void;\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetCertificateIssuersOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateIssuerListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): Promise<Models.GetCertificateIssuersResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificateIssuersOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateIssuersResponse>;\n  }\n\n  /**\n   * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This\n   * operation requires the certificates/setissuers permission.\n   * @summary Sets the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetCertificateIssuerResponse>\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options?: Models.KeyVaultClientSetCertificateIssuerOptionalParams\n  ): Promise<Models.SetCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param callback The callback\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options: Models.KeyVaultClientSetCertificateIssuerOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options?:\n      | Models.KeyVaultClientSetCertificateIssuerOptionalParams\n      | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.SetCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        provider,\n        options\n      },\n      setCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.SetCertificateIssuerResponse>;\n  }\n\n  /**\n   * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer\n   * entity. This operation requires the certificates/setissuers permission.\n   * @summary Updates the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateIssuerResponse>\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams\n  ): Promise<Models.UpdateCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?:\n      | Models.KeyVaultClientUpdateCertificateIssuerOptionalParams\n      | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.UpdateCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      updateCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateIssuerResponse>;\n  }\n\n  /**\n   * The GetCertificateIssuer operation returns the specified certificate issuer resources in the\n   * specified key vault. This operation requires the certificates/manageissuers/getissuers\n   * permission.\n   * @summary Lists the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateIssuerResponse>\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.GetCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      getCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateIssuerResponse>;\n  }\n\n  /**\n   * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from\n   * the vault. This operation requires the certificates/manageissuers/deleteissuers permission.\n   * @summary Deletes the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateIssuerResponse>\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.DeleteCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      deleteCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateIssuerResponse>;\n  }\n\n  /**\n   * If this is the first version, the certificate resource is created. This operation requires the\n   * certificates/create permission.\n   * @summary Creates a new certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateCertificateResponse>\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: Models.KeyVaultClientCreateCertificateOptionalParams\n  ): Promise<Models.CreateCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: Models.KeyVaultClientCreateCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | Models.KeyVaultClientCreateCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.CreateCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      createCertificateOperationSpec,\n      callback\n    ) as Promise<Models.CreateCertificateResponse>;\n  }\n\n  /**\n   * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The\n   * certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM\n   * format the PEM file must contain the key as well as x509 certificates. This operation requires\n   * the certificates/import permission.\n   * @summary Imports a certificate into a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ImportCertificateResponse>\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options?: Models.KeyVaultClientImportCertificateOptionalParams\n  ): Promise<Models.ImportCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param callback The callback\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options: Models.KeyVaultClientImportCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options?:\n      | Models.KeyVaultClientImportCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.ImportCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        base64EncodedCertificate,\n        options\n      },\n      importCertificateOperationSpec,\n      callback\n    ) as Promise<Models.ImportCertificateResponse>;\n  }\n\n  /**\n   * The GetCertificateVersions operation returns the versions of a certificate in the specified key\n   * vault. This operation requires the certificates/list permission.\n   * @summary List the versions of a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateVersionsResponse>\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: Models.KeyVaultClientGetCertificateVersionsOptionalParams\n  ): Promise<Models.GetCertificateVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: Models.KeyVaultClientGetCertificateVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | Models.KeyVaultClientGetCertificateVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): Promise<Models.GetCertificateVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificateVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateVersionsResponse>;\n  }\n\n  /**\n   * The GetCertificatePolicy operation returns the specified certificate policy resources in the\n   * specified key vault. This operation requires the certificates/get permission.\n   * @summary Lists the policy for a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificatePolicyResponse>\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificatePolicyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param callback The callback\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificatePolicy>,\n    callback?: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): Promise<Models.GetCertificatePolicyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificatePolicyOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificatePolicyResponse>;\n  }\n\n  /**\n   * Set specified members in the certificate policy. Leave others as null. This operation requires\n   * the certificates/update permission.\n   * @summary Updates the policy for a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificatePolicyResponse>\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UpdateCertificatePolicyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param callback The callback\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificatePolicy>,\n    callback?: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): Promise<Models.UpdateCertificatePolicyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificatePolicy,\n        options\n      },\n      updateCertificatePolicyOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificatePolicyResponse>;\n  }\n\n  /**\n   * The UpdateCertificate operation applies the specified update on the given certificate; the only\n   * elements updated are the certificate's attributes. This operation requires the\n   * certificates/update permission.\n   * @summary Updates the specified attributes associated with the given certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateResponse>\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: Models.KeyVaultClientUpdateCertificateOptionalParams\n  ): Promise<Models.UpdateCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param callback The callback\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options: Models.KeyVaultClientUpdateCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.UpdateCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificateVersion,\n        options\n      },\n      updateCertificateOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateResponse>;\n  }\n\n  /**\n   * Gets information about a specific certificate. This operation requires the certificates/get\n   * permission.\n   * @summary Gets information about a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateResponse>\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param callback The callback\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.GetCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificateVersion,\n        options\n      },\n      getCertificateOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateResponse>;\n  }\n\n  /**\n   * Updates a certificate creation operation that is already in progress. This operation requires\n   * the certificates/update permission.\n   * @summary Updates a certificate operation.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateOperationResponse>\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UpdateCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param callback The callback\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.UpdateCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        cancellationRequested,\n        options\n      },\n      updateCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateOperationResponse>;\n  }\n\n  /**\n   * Gets the creation operation associated with a specified certificate. This operation requires the\n   * certificates/get permission.\n   * @summary Gets the creation operation of a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateOperationResponse>\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.GetCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateOperationResponse>;\n  }\n\n  /**\n   * Deletes the creation operation for a specified certificate that is in the process of being\n   * created. The certificate is no longer created. This operation requires the certificates/update\n   * permission.\n   * @summary Deletes the creation operation for a specific certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateOperationResponse>\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.DeleteCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      deleteCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateOperationResponse>;\n  }\n\n  /**\n   * The MergeCertificate operation performs the merging of a certificate or certificate chain with a\n   * key pair currently available in the service. This operation requires the certificates/create\n   * permission.\n   * @summary Merges a certificate or a certificate chain with a key pair existing on the server.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MergeCertificateResponse>\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options?: Models.KeyVaultClientMergeCertificateOptionalParams\n  ): Promise<Models.MergeCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param callback The callback\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options: Models.KeyVaultClientMergeCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options?:\n      | Models.KeyVaultClientMergeCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.MergeCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        x509Certificates,\n        options\n      },\n      mergeCertificateOperationSpec,\n      callback\n    ) as Promise<Models.MergeCertificateResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified certificate be downloaded to the client. All versions of\n   * the certificate will be downloaded. This operation requires the certificates/backup permission.\n   * @summary Backs up the specified certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupCertificateResponse>\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): void;\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.BackupCertificateResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): Promise<Models.BackupCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      backupCertificateOperationSpec,\n      callback\n    ) as Promise<Models.BackupCertificateResponse>;\n  }\n\n  /**\n   * Restores a backed up certificate, and all its versions, to a vault. This operation requires the\n   * certificates/restore permission.\n   * @summary Restores a backed up certificate to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreCertificateResponse>\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param callback The callback\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.RestoreCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateBundleBackup,\n        options\n      },\n      restoreCertificateOperationSpec,\n      callback\n    ) as Promise<Models.RestoreCertificateResponse>;\n  }\n\n  /**\n   * The GetDeletedCertificates operation retrieves the certificates in the current vault which are\n   * in a deleted state and ready for recovery or purging. This operation includes deletion-specific\n   * information. This operation requires the certificates/get/list permission. This operation can\n   * only be enabled on soft-delete enabled vaults.\n   * @summary Lists the deleted certificates in the specified vault currently available for recovery.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedCertificatesResponse>\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedCertificatesOptionalParams\n  ): Promise<Models.GetDeletedCertificatesResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedCertificatesOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): void;\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedCertificatesOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedCertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): Promise<Models.GetDeletedCertificatesResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedCertificatesOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedCertificatesResponse>;\n  }\n\n  /**\n   * The GetDeletedCertificate operation retrieves the deleted certificate information plus its\n   * attributes, such as retention interval, scheduled permanent deletion and the current deletion\n   * recovery level. This operation requires the certificates/get permission.\n   * @summary Retrieves information about the specified deleted certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedCertificateResponse>\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param callback The callback\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedCertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): Promise<Models.GetDeletedCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getDeletedCertificateOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedCertificateResponse>;\n  }\n\n  /**\n   * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified\n   * certificate, without possibility for recovery. The operation is not available if the recovery\n   * level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n   * @summary Permanently deletes the specified deleted certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param callback The callback\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      purgeDeletedCertificateOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The\n   * operation is applicable in vaults enabled for soft-delete, and must be issued during the\n   * retention interval (available in the deleted certificate's attributes). This operation requires\n   * the certificates/recover permission.\n   * @summary Recovers the deleted certificate back to its current version under /certificates.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedCertificateResponse>\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param callback The callback\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.RecoverDeletedCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      recoverDeletedCertificateOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedCertificateResponse>;\n  }\n\n  /**\n   * List storage accounts managed by the specified key vault. This operation requires the\n   * storage/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetStorageAccountsResponse>\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetStorageAccountsOptionalParams\n  ): Promise<Models.GetStorageAccountsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetStorageAccountsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): void;\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetStorageAccountsOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageListResult>,\n    callback?: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): Promise<Models.GetStorageAccountsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getStorageAccountsOperationSpec,\n      callback\n    ) as Promise<Models.GetStorageAccountsResponse>;\n  }\n\n  /**\n   * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted\n   * for a vault enabled for soft-delete. This operation requires the storage/list permission.\n   * @summary Lists deleted storage accounts for the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedStorageAccountsResponse>\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams\n  ): Promise<Models.GetDeletedStorageAccountsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): void;\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedStorageListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): Promise<Models.GetDeletedStorageAccountsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedStorageAccountsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedStorageAccountsResponse>;\n  }\n\n  /**\n   * The Get Deleted Storage Account operation returns the specified deleted storage account along\n   * with its attributes. This operation requires the storage/get permission.\n   * @summary Gets the specified deleted storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedStorageAccountResponse>\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedStorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): Promise<Models.GetDeletedStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getDeletedStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedStorageAccountResponse>;\n  }\n\n  /**\n   * The purge deleted storage account operation removes the secret permanently, without the\n   * possibility of recovery. This operation can only be performed on a soft-delete enabled vault.\n   * This operation requires the storage/purge permission.\n   * @summary Permanently deletes the specified storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      purgeDeletedStorageAccountOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * Recovers the deleted storage account in the specified vault. This operation can only be\n   * performed on a soft-delete enabled vault. This operation requires the storage/recover\n   * permission.\n   * @summary Recovers the deleted storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedStorageAccountResponse>\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RecoverDeletedStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      recoverDeletedStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedStorageAccountResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified storage account be downloaded to the client. This\n   * operation requires the storage/backup permission.\n   * @summary Backs up the specified storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupStorageAccountResponse>\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): void;\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupStorageResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): Promise<Models.BackupStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      backupStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.BackupStorageAccountResponse>;\n  }\n\n  /**\n   * Restores a backed up storage account to a vault. This operation requires the storage/restore\n   * permission.\n   * @summary Restores a backed up storage account to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreStorageAccountResponse>\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param callback The callback\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RestoreStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageBundleBackup,\n        options\n      },\n      restoreStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.RestoreStorageAccountResponse>;\n  }\n\n  /**\n   * Deletes a storage account. This operation requires the storage/delete permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteStorageAccountResponse>\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedStorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): Promise<Models.DeleteStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      deleteStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.DeleteStorageAccountResponse>;\n  }\n\n  /**\n   * Gets information about a specified storage account. This operation requires the storage/get\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetStorageAccountResponse>\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.GetStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.GetStorageAccountResponse>;\n  }\n\n  /**\n   * Creates or updates a new storage account. This operation requires the storage/set permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetStorageAccountResponse>\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options?: Models.KeyVaultClientSetStorageAccountOptionalParams\n  ): Promise<Models.SetStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param callback The callback\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options: Models.KeyVaultClientSetStorageAccountOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options?:\n      | Models.KeyVaultClientSetStorageAccountOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.SetStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        resourceId,\n        activeKeyName,\n        autoRegenerateKey,\n        options\n      },\n      setStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.SetStorageAccountResponse>;\n  }\n\n  /**\n   * Updates the specified attributes associated with the given storage account. This operation\n   * requires the storage/set/update permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateStorageAccountResponse>\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientUpdateStorageAccountOptionalParams\n  ): Promise<Models.UpdateStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientUpdateStorageAccountOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientUpdateStorageAccountOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.UpdateStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      updateStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.UpdateStorageAccountResponse>;\n  }\n\n  /**\n   * Regenerates the specified key value for the given storage account. This operation requires the\n   * storage/regeneratekey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RegenerateStorageAccountKeyResponse>\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RegenerateStorageAccountKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param callback The callback\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RegenerateStorageAccountKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        keyName,\n        options\n      },\n      regenerateStorageAccountKeyOperationSpec,\n      callback\n    ) as Promise<Models.RegenerateStorageAccountKeyResponse>;\n  }\n\n  /**\n   * List storage SAS definitions for the given storage account. This operation requires the\n   * storage/listsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSasDefinitionsResponse>\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientGetSasDefinitionsOptionalParams\n  ): Promise<Models.GetSasDefinitionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientGetSasDefinitionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): void;\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientGetSasDefinitionsOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): Promise<Models.GetSasDefinitionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getSasDefinitionsOperationSpec,\n      callback\n    ) as Promise<Models.GetSasDefinitionsResponse>;\n  }\n\n  /**\n   * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for\n   * a vault enabled for soft-delete. This operation requires the storage/listsas permission.\n   * @summary Lists deleted SAS definitions for the specified vault and storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSasDefinitionsResponse>\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams\n  ): Promise<Models.GetDeletedSasDefinitionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): void;\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): Promise<Models.GetDeletedSasDefinitionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getDeletedSasDefinitionsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSasDefinitionsResponse>;\n  }\n\n  /**\n   * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with\n   * its attributes. This operation requires the storage/getsas permission.\n   * @summary Gets the specified deleted sas definition.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSasDefinitionResponse>\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): Promise<Models.GetDeletedSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      getDeletedSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSasDefinitionResponse>;\n  }\n\n  /**\n   * Recovers the deleted SAS definition for the specified storage account. This operation can only\n   * be performed on a soft-delete enabled vault. This operation requires the storage/recover\n   * permission.\n   * @summary Recovers the deleted SAS definition.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedSasDefinitionResponse>\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.RecoverDeletedSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      recoverDeletedSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedSasDefinitionResponse>;\n  }\n\n  /**\n   * Deletes a SAS definition from a specified storage account. This operation requires the\n   * storage/deletesas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteSasDefinitionResponse>\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): Promise<Models.DeleteSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      deleteSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.DeleteSasDefinitionResponse>;\n  }\n\n  /**\n   * Gets information about a SAS definition for the specified storage account. This operation\n   * requires the storage/getsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSasDefinitionResponse>\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.GetSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      getSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.GetSasDefinitionResponse>;\n  }\n\n  /**\n   * Creates or updates a new SAS definition for the specified storage account. This operation\n   * requires the storage/setsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetSasDefinitionResponse>\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options?: Models.KeyVaultClientSetSasDefinitionOptionalParams\n  ): Promise<Models.SetSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param callback The callback\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options: Models.KeyVaultClientSetSasDefinitionOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options?:\n      | Models.KeyVaultClientSetSasDefinitionOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.SetSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        templateUri,\n        sasType,\n        validityPeriod,\n        options\n      },\n      setSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.SetSasDefinitionResponse>;\n  }\n\n  /**\n   * Updates the specified attributes associated with the given SAS definition. This operation\n   * requires the storage/setsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateSasDefinitionResponse>\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: Models.KeyVaultClientUpdateSasDefinitionOptionalParams\n  ): Promise<Models.UpdateSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: Models.KeyVaultClientUpdateSasDefinitionOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | Models.KeyVaultClientUpdateSasDefinitionOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.UpdateSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      updateSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.UpdateSasDefinitionResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst createKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/create\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      kty: \"kty\",\n      keySize: [\"options\", \"keySize\"],\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      curve: [\"options\", \"curve\"]\n    },\n    mapper: {\n      ...Mappers.KeyCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst importKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"keys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      hsm: [\"options\", \"hsm\"],\n      key: \"key\",\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.KeyImportParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"keys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"keys/{key-name}/{key-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.KeyUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys/{key-name}/{key-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeyVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys/{key-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeysOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupKeyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyBundleBackup: \"keyBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.KeyRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst encryptOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/encrypt\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst decryptOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/decrypt\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst signOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/sign\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeySignParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst verifyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/verify\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      digest: \"digest\",\n      signature: \"signature\"\n    },\n    mapper: {\n      ...Mappers.KeyVerifyParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyVerifyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst wrapKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/wrapkey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst unwrapKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/unwrapkey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedKeysOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedkeys\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedkeys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedkeys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedkeys/{key-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"secrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      value: \"value\",\n      tags: [\"options\", \"tags\"],\n      contentType: [\"options\", \"contentType\"],\n      secretAttributes: [\"options\", \"secretAttributes\"]\n    },\n    mapper: {\n      ...Mappers.SecretSetParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"secrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"secrets/{secret-name}/{secret-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1, Parameters.secretVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      contentType: [\"options\", \"contentType\"],\n      secretAttributes: [\"options\", \"secretAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SecretUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets/{secret-name}/{secret-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1, Parameters.secretVersion],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets/{secret-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSecretsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedsecrets\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedsecrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedsecrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedsecrets/{secret-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"secrets/{secret-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupSecretResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"secrets/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      secretBundleBackup: \"secretBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.SecretRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificatesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.includePending, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: \"contacts\",\n    mapper: {\n      ...Mappers.Contacts,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateIssuersOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/issuers\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateIssuerListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      provider: \"provider\",\n      credentials: [\"options\", \"credentials\"],\n      organizationDetails: [\"options\", \"organizationDetails\"],\n      attributes: [\"options\", \"attributes\"]\n    },\n    mapper: {\n      ...Mappers.CertificateIssuerSetParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      provider: [\"options\", \"provider\"],\n      credentials: [\"options\", \"credentials\"],\n      organizationDetails: [\"options\", \"organizationDetails\"],\n      attributes: [\"options\", \"attributes\"]\n    },\n    mapper: {\n      ...Mappers.CertificateIssuerUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst createCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/create\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    202: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst importCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/import\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      base64EncodedCertificate: \"base64EncodedCertificate\",\n      password: [\"options\", \"password\"],\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateImportParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificatePolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/policy\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificatePolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificatePolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/policy\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: \"certificatePolicy\",\n    mapper: {\n      ...Mappers.CertificatePolicy,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificatePolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/{certificate-version}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.certificateName0,\n    Parameters.certificateVersion\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/{certificate-version}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.certificateName0,\n    Parameters.certificateVersion\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      cancellationRequested: \"cancellationRequested\"\n    },\n    mapper: {\n      ...Mappers.CertificateOperationUpdateParameter,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst mergeCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/pending/merge\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      x509Certificates: \"x509Certificates\",\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateMergeParameters,\n      required: true\n    }\n  },\n  responses: {\n    201: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupCertificateResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificateBundleBackup: \"certificateBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.CertificateRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedCertificatesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedcertificates\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.includePending, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedcertificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedcertificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedcertificates/{certificate-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getStorageAccountsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedStorageAccountsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedstorage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedstorage/{storage-account-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/{storage-account-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupStorageResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      storageBundleBackup: \"storageBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.StorageRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      resourceId: \"resourceId\",\n      activeKeyName: \"activeKeyName\",\n      autoRegenerateKey: \"autoRegenerateKey\",\n      regenerationPeriod: [\"options\", \"regenerationPeriod\"],\n      storageAccountAttributes: [\"options\", \"storageAccountAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.StorageAccountCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      activeKeyName: [\"options\", \"activeKeyName\"],\n      autoRegenerateKey: [\"options\", \"autoRegenerateKey\"],\n      regenerationPeriod: [\"options\", \"regenerationPeriod\"],\n      storageAccountAttributes: [\"options\", \"storageAccountAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.StorageAccountUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst regenerateStorageAccountKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/{storage-account-name}/regeneratekey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyName: \"keyName\"\n    },\n    mapper: {\n      ...Mappers.StorageAccountRegenerteKeyParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSasDefinitionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}/sas\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSasDefinitionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}/sas\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      templateUri: \"templateUri\",\n      sasType: \"sasType\",\n      validityPeriod: \"validityPeriod\",\n      sasDefinitionAttributes: [\"options\", \"sasDefinitionAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SasDefinitionCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      templateUri: [\"options\", \"templateUri\"],\n      sasType: [\"options\", \"sasType\"],\n      validityPeriod: [\"options\", \"validityPeriod\"],\n      sasDefinitionAttributes: [\"options\", \"sasDefinitionAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SasDefinitionUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nexport {\n  KeyVaultClient,\n  KeyVaultClientContext,\n  Models as KeyVaultModels,\n  Mappers as KeyVaultMappers\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nexport const SDK_VERSION: string = \"4.0.2\";\n\nexport const RetryConstants = {\n  MIN_RETRY_INTERVAL_MS: 3000\n};\n\nexport const HeaderConstants = {\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\"\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { TokenCredential } from \"@azure/core-http\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions, RequestPolicyFactory } from \"@azure/core-http\";\nimport { Constants } from \"@azure/core-http\";\nimport { HttpOperationResponse } from \"@azure/core-http\";\nimport { HttpHeaders } from \"@azure/core-http\";\nimport { WebResource } from \"@azure/core-http\";\nimport { AccessTokenCache, ExpiringAccessTokenCache } from \"@azure/core-http\";\n\n/**\n * Creates a new ChallengeBasedAuthenticationPolicy factory.\n *\n * @param credential The TokenCredential implementation that can supply the challenge token.\n */\nexport function challengeBasedAuthenticationPolicy(credential: TokenCredential): RequestPolicyFactory {\n  const tokenCache: AccessTokenCache = new ExpiringAccessTokenCache();\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ChallengeBasedAuthenticationPolicy(nextPolicy, options, credential, tokenCache);\n    }\n  };\n}\n\nexport class AuthenticationChallenge {\n  constructor(public scopes: string[] | string) { }\n}\n\n/**\n *\n * Provides a RequestPolicy that can request a token from a TokenCredential\n * implementation and then apply it to the Authorization header of a request\n * as a Bearer token.\n *\n */\nexport class ChallengeBasedAuthenticationPolicy extends BaseRequestPolicy {\n  private challenge: AuthenticationChallenge | undefined = undefined;\n\n  /**\n   * Creates a new ChallengeBasedAuthenticationPolicy object.\n   *\n   * @param nextPolicy The next RequestPolicy in the request pipeline.\n   * @param options Options for this RequestPolicy.\n   * @param credential The TokenCredential implementation that can supply the bearer token.\n   * @param tokenCache The cache for the most recent AccessToken returned by the TokenCredential.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private credential: TokenCredential,\n    private tokenCache: AccessTokenCache\n  ) {\n    super(nextPolicy, options);\n  }\n\n  private parseWWWAuthenticate(www_authenticate: string): string {\n    // Parses an authentication message like:\n    // ```\n    // Bearer authorization=\"some_authorization\", resource=\"https://some.url\"\n    // ```\n    let authenticateArray = www_authenticate.split(\" \");\n\n    // Remove the \"Bearer\" piece\n    delete authenticateArray[0];\n\n    // Split the KV comma-separated list\n    let commaSep = authenticateArray.join().split(\",\");\n    for (let item of commaSep) {\n      // Split the key/value pairs\n      let kv = item.split(\"=\");\n      if (kv[0].trim() == \"resource\") {\n        // Remove the quotations around the string\n        let resource = kv[1].trim().replace(/['\"]+/g, '');\n        return resource;\n      }\n    }\n    return \"\";\n  }\n\n  /**\n   * Applies the Bearer token to the request through the Authorization header.\n   * @param webResource\n   */\n  public async sendRequest(\n    webResource: WebResource\n  ): Promise<HttpOperationResponse> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n\n    let originalBody = webResource.body;\n\n    if (this.challenge == undefined) {\n      // Use a blank to start the challenge\n      webResource.body = \"\";\n    } else {\n      // or use the cached token if we have one\n      await this.authenticateRequest(webResource);\n    }\n\n    let response = await this._nextPolicy.sendRequest(webResource);\n\n    if (response.status == 401) {\n      webResource.body = originalBody;\n\n      let www_authenticate = response.headers.get(\"WWW-Authenticate\");\n\n      if (www_authenticate) {\n        let resource = this.parseWWWAuthenticate(www_authenticate);\n        let challenge = new AuthenticationChallenge(resource + \"/.default\")\n\n        if (this.challenge != challenge) {\n          this.challenge = challenge;\n          this.tokenCache.setCachedToken(undefined);\n\n          await this.authenticateRequest(webResource);\n        }\n      }\n      return this._nextPolicy.sendRequest(webResource);\n    } else {\n      return response;\n    }\n  }\n\n  private async authenticateRequest(webResource: WebResource): Promise<void> {\n    let accessToken = this.tokenCache.getCachedToken();\n    if (accessToken === undefined) {\n      accessToken = (await this.credential.getToken(this.challenge!.scopes)) || undefined;\n      this.tokenCache.setCachedToken(accessToken);\n    }\n\n    if (accessToken) {\n      webResource.headers.set(\n        Constants.HeaderConstants.AUTHORIZATION,\n        `Bearer ${accessToken.token}`\n      );\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollOperationState, PollOperation } from \"@azure/core-lro\";\nimport { RequestOptionsBase } from \"@azure/core-http\";\nimport { DeletedSecret, SecretClientInterface } from \"../../secretsModels\";\n\n/**\n * An interface representing the state of a delete secret's poll operation\n */\nexport interface DeleteSecretPollOperationState extends PollOperationState<DeletedSecret> {\n  /**\n   * The name of the secret.\n   */\n  name: string;\n  /**\n   * Options for the core-http requests.\n   */\n  requestOptions?: RequestOptionsBase;\n  /**\n   * An interface representing a SecretClient. For internal use.\n   */\n  client: SecretClientInterface;\n}\n\n/**\n * An interface representing a delete secret's poll operation\n */\nexport interface DeleteSecretPollOperation\n  extends PollOperation<DeleteSecretPollOperationState, DeletedSecret> {}\n\n/**\n * @summary Reaches to the service and updates the delete secret's poll operation.\n * @param [options] The optional parameters, which are an abortSignal from @azure/abort-controller and a function that triggers the poller's onProgress function.\n */\nasync function update(\n  this: DeleteSecretPollOperation,\n  options: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: DeleteSecretPollOperationState) => void;\n  } = {}\n): Promise<DeleteSecretPollOperation> {\n  const state = this.state;\n  const { name, client } = state;\n\n  const requestOptions = state.requestOptions || {};\n  if (options.abortSignal) {\n    requestOptions.abortSignal = options.abortSignal;\n  }\n\n  if (!state.isStarted) {\n    const deletedSecret = await client.deleteSecret(name, requestOptions);\n    state.isStarted = true;\n    state.result = deletedSecret;\n    if (!deletedSecret.properties.recoveryId) {\n      state.isCompleted = true;\n    }\n  }\n\n  if (!state.isCompleted) {\n    try {\n      state.result = await client.getDeletedSecret(name, { requestOptions });\n      state.isCompleted = true;\n    } catch (error) {\n      if (error.statusCode === 403) {\n        // At this point, the resource exists but the user doesn't have access to it.\n        state.isCompleted = true;\n      } else if (error.statusCode !== 404) {\n        state.error = error;\n        state.isCompleted = true;\n      }\n    }\n  }\n\n  return makeDeleteSecretPollOperation(state);\n}\n\n/**\n * @summary Reaches to the service and cancels the secret's operation, also updating the secret's poll operation\n * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n */\nasync function cancel(\n  this: DeleteSecretPollOperation,\n  _: { abortSignal?: AbortSignal } = {}\n): Promise<DeleteSecretPollOperation> {\n  throw new Error(\"Canceling the deletion of a secret is not supported.\");\n}\n\n/**\n * @summary Serializes the create secret's poll operation\n */\nfunction toString(this: DeleteSecretPollOperation): string {\n  return JSON.stringify({\n    state: this.state\n  });\n}\n\n/**\n * @summary Builds a create secret's poll operation\n * @param [state] A poll operation's state, in case the new one is intended to follow up where the previous one was left.\n */\nexport function makeDeleteSecretPollOperation(\n  state: DeleteSecretPollOperationState\n): DeleteSecretPollOperation {\n  return {\n    state: {\n      ...state\n    },\n    update,\n    cancel,\n    toString\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { delay, RequestOptionsBase } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\nimport { DeleteSecretPollOperationState, makeDeleteSecretPollOperation } from \"./operation\";\nimport { DeletedSecret, SecretClientInterface } from \"../../secretsModels\";\n\nexport interface DeleteSecretPollerOptions {\n  client: SecretClientInterface;\n  name: string;\n  requestOptions?: RequestOptionsBase;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * Class that deletes a poller that waits until a secret finishes being deleted\n */\nexport class DeleteSecretPoller extends Poller<DeleteSecretPollOperationState, DeletedSecret> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   * @memberof DeleteSecretPoller\n   */\n  public intervalInMs: number;\n\n  constructor(options: DeleteSecretPollerOptions) {\n    const { client, name, requestOptions, intervalInMs = 2000, resumeFrom } = options;\n\n    let state: DeleteSecretPollOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeDeleteSecretPollOperation({\n      ...state,\n      name,\n      requestOptions,\n      client\n    });\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   * @memberof DeleteSecretPoller\n   */\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollOperationState, PollOperation } from \"@azure/core-lro\";\nimport { RequestOptionsBase } from \"@azure/core-http\";\nimport { SecretProperties, SecretClientInterface } from \"../../secretsModels\";\n\n/**\n * An interface representing the state of a delete secret's poll operation\n */\nexport interface RecoverDeletedSecretPollOperationState\n  extends PollOperationState<SecretProperties> {\n  /**\n   * The name of the secret.\n   */\n  name: string;\n  /**\n   * Options for the core-http requests.\n   */\n  requestOptions?: RequestOptionsBase;\n  /**\n   * An interface representing a SecretClient. For internal use.\n   */\n  client: SecretClientInterface;\n}\n\n/**\n * An interface representing a delete secret's poll operation\n */\nexport interface RecoverDeletedSecretPollOperation\n  extends PollOperation<RecoverDeletedSecretPollOperationState, SecretProperties> {}\n\n/**\n * @summary Reaches to the service and updates the delete secret's poll operation.\n * @param [options] The optional parameters, which are an abortSignal from @azure/abort-controller and a function that triggers the poller's onProgress function.\n */\nasync function update(\n  this: RecoverDeletedSecretPollOperation,\n  options: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: RecoverDeletedSecretPollOperationState) => void;\n  } = {}\n): Promise<RecoverDeletedSecretPollOperation> {\n  const state = this.state;\n  const { name, client } = state;\n\n  const requestOptions = state.requestOptions || {};\n  if (options.abortSignal) {\n    requestOptions.abortSignal = options.abortSignal;\n  }\n\n  if (!state.isStarted) {\n    try {\n      state.result = (await client.getSecret(name, { requestOptions })).properties;\n      state.isCompleted = true;\n    } catch (_) {}\n    if (!state.isCompleted) {\n      state.result = await client.recoverDeletedSecret(name, { requestOptions });\n      state.isStarted = true;\n    }\n  }\n\n  if (!state.isCompleted) {\n    try {\n      state.result = (await client.getSecret(name, { requestOptions })).properties;\n      state.isCompleted = true;\n    } catch (error) {\n      if (error.statusCode === 403) {\n        // At this point, the resource exists but the user doesn't have access to it.\n        state.isCompleted = true;\n      } else if (error.statusCode !== 404) {\n        state.error = error;\n        state.isCompleted = true;\n      }\n    }\n  }\n\n  return makeRecoverDeletedSecretPollOperation(state);\n}\n\n/**\n * @summary Reaches to the service and cancels the secret's operation, also updating the secret's poll operation\n * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n */\nasync function cancel(\n  this: RecoverDeletedSecretPollOperation,\n  _: { abortSignal?: AbortSignal } = {}\n): Promise<RecoverDeletedSecretPollOperation> {\n  throw new Error(\"Canceling the deletion of a secret is not supported.\");\n}\n\n/**\n * @summary Serializes the create secret's poll operation\n */\nfunction toString(this: RecoverDeletedSecretPollOperation): string {\n  return JSON.stringify({\n    state: this.state\n  });\n}\n\n/**\n * @summary Builds a create secret's poll operation\n * @param [state] A poll operation's state, in case the new one is intended to follow up where the previous one was left.\n */\nexport function makeRecoverDeletedSecretPollOperation(\n  state: RecoverDeletedSecretPollOperationState\n): RecoverDeletedSecretPollOperation {\n  return {\n    state: {\n      ...state\n    },\n    update,\n    cancel,\n    toString\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { delay, RequestOptionsBase } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\nimport {\n  RecoverDeletedSecretPollOperationState,\n  makeRecoverDeletedSecretPollOperation\n} from \"./operation\";\nimport { SecretProperties, SecretClientInterface } from \"../../secretsModels\";\n\nexport interface RecoverDeletedSecretPollerOptions {\n  client: SecretClientInterface;\n  name: string;\n  requestOptions?: RequestOptionsBase;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * Class that deletes a poller that waits until a secret finishes being deleted\n */\nexport class RecoverDeletedSecretPoller extends Poller<\n  RecoverDeletedSecretPollOperationState,\n  SecretProperties\n> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   * @memberof RecoverDeletedSecretPoller\n   */\n  public intervalInMs: number;\n\n  constructor(options: RecoverDeletedSecretPollerOptions) {\n    const { client, name, requestOptions, intervalInMs = 2000, resumeFrom } = options;\n\n    let state: RecoverDeletedSecretPollOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeRecoverDeletedSecretPollOperation({\n      ...state,\n      name,\n      requestOptions,\n      client\n    });\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   * @memberof RecoverDeletedSecretPoller\n   */\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n","import { ParsedKeyVaultEntityIdentifier } from \"./keyVaultBase\";\nimport * as url from \"url\";\n\nexport function parseKeyvaultIdentifier(\n  collection: string,\n  identifier: string | undefined\n): ParsedKeyVaultEntityIdentifier {\n  if (typeof collection != \"string\" || !(collection = collection.trim())) {\n    throw new Error(\"Invalid collection argument\");\n  }\n\n  if (typeof identifier != \"string\" || !(identifier = identifier.trim())) {\n    throw new Error(\"Invalid identifier argument\");\n  }\n\n  var baseUri;\n  try {\n    baseUri = url.parse(identifier, true, true);\n  } catch (e) {\n    throw new Error(`Invalid ${collection} identifier: ${identifier}. Not a valid URI`);\n  }\n\n  // Path is of the form '/collection/name[/version]'\n  var segments = (baseUri.pathname || \"\").split(\"/\");\n  if (segments.length !== 3 && segments.length !== 4) {\n    throw new Error(\n      `Invalid ${collection} identifier: ${identifier}. Bad number of segments: ${segments.length}`\n    );\n  }\n\n  if (collection !== segments[1]) {\n    throw new Error(\n      `Invalid ${collection} identifier: ${identifier}. segment [1] should be \"${collection}\", found \"${segments[1]}\"`\n    );\n  }\n\n  var vaultUrl = `${baseUri.protocol}//${baseUri.host}`;\n  var name = segments[2];\n  var version = segments.length === 4 ? segments[3] : undefined;\n  return {\n    vaultUrl,\n    name,\n    version\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* eslint @typescript-eslint/member-ordering: 0 */\n\nimport {\n  TokenCredential,\n  isTokenCredential,\n  signingPolicy,\n  RequestOptionsBase,\n  operationOptionsToRequestOptionsBase,\n  PipelineOptions,\n  createPipelineFromOptions\n} from \"@azure/core-http\";\n\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span } from \"@opentelemetry/types\";\nimport { logger } from \"./log\";\n\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport {\n  SecretBundle,\n  DeletedSecretBundle,\n  DeletionRecoveryLevel,\n  KeyVaultClientGetSecretsOptionalParams,\n  SetSecretResponse,\n  DeleteSecretResponse,\n  UpdateSecretResponse,\n  GetSecretResponse,\n  GetDeletedSecretResponse,\n  BackupSecretResponse,\n  RestoreSecretResponse\n} from \"./core/models\";\nimport { KeyVaultClient } from \"./core/keyVaultClient\";\nimport { SDK_VERSION } from \"./core/utils/constants\";\nimport { challengeBasedAuthenticationPolicy } from \"./core/challengeBasedAuthenticationPolicy\";\n\nimport { DeleteSecretPoller } from \"./lro/delete/poller\";\nimport { RecoverDeletedSecretPoller } from \"./lro/recover/poller\";\n\nimport {\n  KeyVaultSecret,\n  DeletedSecret,\n  DeleteSecretOptions,\n  SecretClientInterface,\n  SecretPollerOptions,\n  BeginDeleteSecretOptions,\n  BeginRecoverDeletedSecretOptions,\n  SetSecretOptions,\n  UpdateSecretPropertiesOptions,\n  GetSecretOptions,\n  GetDeletedSecretOptions,\n  PurgeDeletedSecretOptions,\n  BackupSecretOptions,\n  RestoreSecretBackupOptions,\n  RecoverDeletedSecretOptions,\n  ListPropertiesOfSecretVersionsOptions,\n  ListPropertiesOfSecretsOptions,\n  ListDeletedSecretsOptions,\n  SecretProperties\n} from \"./secretsModels\";\nimport { parseKeyvaultIdentifier as parseKeyvaultEntityIdentifier } from \"./core/utils\";\n\nexport {\n  DeletedSecret,\n  DeletionRecoveryLevel,\n  GetSecretOptions,\n  PipelineOptions,\n  GetDeletedSecretOptions,\n  PurgeDeletedSecretOptions,\n  BackupSecretOptions,\n  RestoreSecretBackupOptions,\n  ListPropertiesOfSecretVersionsOptions,\n  ListPropertiesOfSecretsOptions,\n  ListDeletedSecretsOptions,\n  PagedAsyncIterableIterator,\n  PageSettings,\n  PollerLike,\n  PollOperationState,\n  KeyVaultSecret,\n  SecretProperties,\n  SecretPollerOptions,\n  BeginDeleteSecretOptions,\n  BeginRecoverDeletedSecretOptions,\n  SetSecretOptions,\n  UpdateSecretPropertiesOptions,\n  logger\n};\n\n// This is part of constructing the autogenerated client. In the future, it should not\n// be required. See also: https://github.com/Azure/azure-sdk-for-js/issues/5508\nconst SERVICE_API_VERSION = \"7.0\";\n\n/**\n * The SecretClient provides methods to manage {@link KeyVaultSecret} in\n * the Azure Key Vault. The client supports creating, retrieving, updating,\n * deleting, purging, backing up, restoring and listing KeyVaultSecrets. The\n * client also supports listing {@link DeletedSecret} for a soft-delete enabled Azure\n * Key Vault.\n */\nexport class SecretClient {\n  /**\n   * The base URL to the vault\n   */\n  public readonly vaultUrl: string;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated KeyVault HTTP client.\n   */\n  private readonly client: KeyVaultClient;\n\n  /**\n   * @internal\n   * @ignore\n   * A self reference that bypasses private methods, for the pollers.\n   */\n  private readonly pollerClient: SecretClientInterface = {\n    recoverDeletedSecret: this.recoverDeletedSecret.bind(this),\n    getSecret: this.getSecret.bind(this),\n    deleteSecret: this.deleteSecret.bind(this),\n    getDeletedSecret: this.getDeletedSecret.bind(this)\n  };\n\n  /**\n   * Creates an instance of SecretClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;\n   * let credentials = new DefaultAzureCredential();\n   *\n   * let client = new SecretClient(vaultUrl, credentials);\n   * ```\n   * @param {string} vaultUrl the base URL to the vault.\n   * @param {TokenCredential} credential An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the @azure/identity package to create a credential that suits your needs.\n   * @param {PipelineOptions} [pipelineOptions] Optional. Pipeline options used to configure Key Vault API requests.\n   *                                                         Omit this parameter to use the default pipeline configuration.\n   * @memberof SecretClient\n   */\n  constructor(\n    vaultUrl: string,\n    credential: TokenCredential,\n    pipelineOptions: PipelineOptions = {}\n  ) {\n    this.vaultUrl = vaultUrl;\n\n    const libInfo = `azsdk-js-keyvault-secrets/${SDK_VERSION}`;\n    if (pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions.userAgentPrefix !== undefined\n        ? `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`\n        : libInfo;\n    } else {\n      pipelineOptions.userAgentOptions = {\n        userAgentPrefix: libInfo\n      };\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? challengeBasedAuthenticationPolicy(credential)\n      : signingPolicy(credential);\n\n    const internalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          logPolicyOptions: {\n            allowedHeaderNames: [\n              \"x-ms-keyvault-region\",\n              \"x-ms-keyvault-network-info\",\n              \"x-ms-keyvault-service-version\"\n            ]\n          }\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n    this.client = new KeyVaultClient(credential, SERVICE_API_VERSION, pipeline);\n  }\n\n  /**\n   * The setSecret method adds a secret or secret version to the Azure Key Vault. If the named secret\n   * already exists, Azure Key Vault creates a new version of that secret.\n   * This operation requires the secrets/set permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * await client.setSecret(\"MySecretName\", \"ABC123\");\n   * ```\n   * @summary Adds a secret in a specified key vault.\n   * @param {string} secretName The name of the secret.\n   * @param {string} value The value of the secret.\n   * @param {SetSecretOptions} [options] The optional parameters.\n   */\n  public async setSecret(\n    secretName: string,\n    value: string,\n    options: SetSecretOptions = {}\n  ): Promise<KeyVaultSecret> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n\n    if (requestOptions) {\n      const { enabled, notBefore, expiresOn: expires, ...remainingOptions } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        secretAttributes: {\n          enabled,\n          notBefore,\n          expires\n        }\n      };\n\n      const span = this.createSpan(\"setSecret\", unflattenedOptions);\n\n      let response: SetSecretResponse;\n      try {\n        response = await this.client.setSecret(\n          this.vaultUrl,\n          secretName,\n          value,\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n\n      return this.getSecretFromSecretBundle(response);\n    } else {\n      const response = await this.client.setSecret(\n        this.vaultUrl,\n        secretName,\n        value,\n        requestOptions\n      );\n      return this.getSecretFromSecretBundle(response);\n    }\n  }\n\n  /**\n   * Deletes a secret stored in Azure Key Vault.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the secret is deleted.\n   *\n   * This operation requires the secrets/delete permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new SecretClient(url, credentials);\n   * await client.setSecret(\"MySecretName\", \"ABC123\");\n   *\n   * const deletePoller = await client.beginDeleteSecret(\"MySecretName\");\n   *\n   * // Serializing the poller\n   * const serialized = deletePoller.toString();\n   *\n   * // A new poller can be created with:\n   * // const newPoller = await client.beginDeleteSecret(\"MySecretName\", { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const deletedSecret = await deletePoller.pollUntilDone();\n   * console.log(deletedSecret);\n   * ```\n   * @summary Deletes a secret from a specified key vault.\n   * @param {string} secretName The name of the secret.\n   * @param {BeginDeleteSecretOptions} [options] The optional parameters.\n   */\n  public async beginDeleteSecret(\n    name: string,\n    options: BeginDeleteSecretOptions = {}\n  ): Promise<PollerLike<PollOperationState<DeletedSecret>, DeletedSecret>> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const poller = new DeleteSecretPoller({\n      name,\n      client: this.pollerClient,\n      ...options,\n      requestOptions\n    });\n    // This will initialize the poller's operation (the deletion of the secret).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * The updateSecret method changes specified attributes of an existing stored secret. Properties that\n   * are not specified in the request are left unchanged. The value of a secret itself cannot be\n   * changed. This operation requires the secrets/set permission.\n   *\n   * Example usage:\n   * ```ts\n   * let secretName = \"MySecretName\";\n   * let client = new SecretClient(url, credentials);\n   * let secret = await client.getSecret(secretName);\n   * await client.updateSecret(secretName, secret.version, { enabled: false });\n   * ```\n   * @summary Updates the attributes associated with a specified secret in a given key vault.\n   * @param {string} secretName The name of the secret.\n   * @param {string} secretVersion The version of the secret.\n   * @param {UpdateSecretPropertiesOptions} [options] The optional parameters.\n   */\n  public async updateSecretProperties(\n    secretName: string,\n    secretVersion: string,\n    options: UpdateSecretPropertiesOptions = {}\n  ): Promise<SecretProperties> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n\n    if (requestOptions) {\n      const { enabled, notBefore, expiresOn: expires, ...remainingOptions } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        secretAttributes: {\n          enabled,\n          notBefore,\n          expires\n        }\n      };\n\n      const span = this.createSpan(\"updateSecretProperties\", unflattenedOptions);\n\n      let response: UpdateSecretResponse;\n\n      try {\n        response = await this.client.updateSecret(\n          this.vaultUrl,\n          secretName,\n          secretVersion,\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n\n      return this.getSecretFromSecretBundle(response).properties;\n    } else {\n      const response = await this.client.updateSecret(\n        this.vaultUrl,\n        secretName,\n        secretVersion,\n        requestOptions\n      );\n      return this.getSecretFromSecretBundle(response).properties;\n    }\n  }\n\n  /**\n   * The getSecret method is applicable to any secret stored in Azure Key Vault. This operation requires\n   * the secrets/get permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * let secret = await client.getSecret(\"MySecretName\");\n   * ```\n   * @summary Get a specified secret from a given key vault.\n   * @param {string} secretName The name of the secret.\n   * @param {GetSecretOptions} [options] The optional parameters.\n   */\n  public async getSecret(\n    secretName: string,\n    options: GetSecretOptions = {}\n  ): Promise<KeyVaultSecret> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"getSecret\", requestOptions);\n\n    let response: GetSecretResponse;\n    try {\n      response = await this.client.getSecret(\n        this.vaultUrl,\n        secretName,\n        options && options.version ? options.version : \"\",\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getSecretFromSecretBundle(response);\n  }\n\n  /**\n   * The getDeletedSecret method returns the specified deleted secret along with its attributes.\n   * This operation requires the secrets/get permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * await client.getDeletedSecret(\"MyDeletedSecret\");\n   * ```\n   * @summary Gets the specified deleted secret.\n   * @param {string} secretName The name of the secret.\n   * @param {GetDeletedSecretOptions} [options] The optional parameters.\n   */\n  public async getDeletedSecret(\n    secretName: string,\n    options: GetDeletedSecretOptions = {}\n  ): Promise<DeletedSecret> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"getDeletedSecret\", requestOptions);\n\n    let response: GetDeletedSecretResponse;\n\n    try {\n      response = await this.client.getDeletedSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getSecretFromSecretBundle(response);\n  }\n\n  /**\n   * The purge deleted secret operation removes the secret permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation\n   * requires the secrets/purge permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new SecretClient(url, credentials);\n   * const deletePoller = await client.beginDeleteSecret(\"MySecretName\");\n   * await deletePoller.pollUntilDone();\n   * await client.purgeDeletedSecret(\"MySecretName\");\n   * ```\n   * @summary Permanently deletes the specified secret.\n   * @param {string} secretName The name of the secret.\n   * @param {PurgeDeletedSecretOptions} [options] The optional parameters.\n   */\n  public async purgeDeletedSecret(\n    secretName: string,\n    options: PurgeDeletedSecretOptions = {}\n  ): Promise<void> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"purgeDeletedSecret\", requestOptions);\n\n    try {\n      await this.client.purgeDeletedSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Recovers the deleted secret in the specified vault.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the secret is recovered.\n   *\n   * This operation requires the secrets/recover permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new SecretClient(url, credentials);\n   * await client.setSecret(\"MySecretName\", \"ABC123\");\n   *\n   * const deletePoller = await client.beginDeleteSecret(\"MySecretName\");\n   * await deletePoller.pollUntilDone();\n   *\n   * const recoverPoller = await client.recoverDeletedSecret(\"MySecretName\");\n   *\n   * // Serializing the poller\n   * const serialized = recoverPoller.toString();\n   *\n   * // A new poller can be created with:\n   * // const newPoller = await client.beginRecoverDeletedSecret(\"MySecretName\", { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const deletedSecret = await recoverPoller.pollUntilDone();\n   * console.log(deletedSecret);\n   * ```\n   * @summary Recovers the deleted secret to the latest version.\n   * @param {string} secretName The name of the deleted secret.\n   * @param {BeginRecoverDeletedSecretOptions} [options] The optional parameters.\n   */\n  public async beginRecoverDeletedSecret(\n    name: string,\n    options: BeginRecoverDeletedSecretOptions = {}\n  ): Promise<PollerLike<PollOperationState<SecretProperties>, SecretProperties>> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n\n    const poller = new RecoverDeletedSecretPoller({\n      name,\n      client: this.pollerClient,\n      ...options,\n      requestOptions\n    });\n\n    // This will initialize the poller's operation (the recovery of the deleted secret).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Requests that a backup of the specified secret be downloaded to the client. All versions of the\n   * secret will be downloaded. This operation requires the secrets/backup permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * let backupResult = await client.backupSecret(\"MySecretName\");\n   * ```\n   * @summary Backs up the specified secret.\n   * @param {string} secretName The name of the secret.\n   * @param {BackupSecretOptions} [options] The optional parameters.\n   */\n  public async backupSecret(\n    secretName: string,\n    options: BackupSecretOptions = {}\n  ): Promise<Uint8Array | undefined> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"backupSecret\", requestOptions);\n\n    let response: BackupSecretResponse;\n\n    try {\n      response = await this.client.backupSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n    return response.value;\n  }\n\n  /**\n   * Restores a backed up secret, and all its versions, to a vault. This operation requires the\n   * secrets/restore permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * let mySecretBundle = await client.backupSecret(\"MySecretName\");\n   * // ...\n   * await client.restoreSecretBackup(mySecretBundle);\n   * ```\n   * @summary Restores a backed up secret to a vault.\n   * @param {Uint8Array} secretBundleBackup The backup blob associated with a secret bundle.\n   * @param {RestoreSecretResponse} [options] The optional parameters.\n   */\n  public async restoreSecretBackup(\n    secretBundleBackup: Uint8Array,\n    options: RestoreSecretBackupOptions = {}\n  ): Promise<SecretProperties> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"restoreSecretBackup\", requestOptions);\n\n    let response: RestoreSecretResponse;\n\n    try {\n      response = await this.client.restoreSecret(\n        this.vaultUrl,\n        secretBundleBackup,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getSecretFromSecretBundle(response).properties;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Sends a delete request for the given KeyVault Secret's name to the KeyVault service.\n   * Since the KeyVault Secret won't be immediately deleted, we have {@link beginDeleteSecret}.\n   * @param {string} name The name of the KeyVault Secret.\n   * @param {RequestOptionsBase} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async deleteSecret(\n    secretName: string,\n    options: DeleteSecretOptions = {}\n  ): Promise<DeletedSecret> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"deleteSecret\", requestOptions);\n\n    let response: DeleteSecretResponse;\n    try {\n      response = await this.client.deleteSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getSecretFromSecretBundle(response);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Sends a request to recover a deleted KeyVault Secret based on the given name.\n   * Since the KeyVault Secret won't be immediately recover the deleted secret, we have {@link beginRecoverDeletedSecret}.\n   * @param {string} name The name of the KeyVault Secret.\n   * @param {RecoverDeletedKeyOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async recoverDeletedSecret(\n    secretName: string,\n    options: RecoverDeletedSecretOptions = {}\n  ): Promise<SecretProperties> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"recoverDeletedSecret\", requestOptions);\n\n    let properties: SecretProperties;\n\n    try {\n      const response = await this.client.recoverDeletedSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n      properties = this.getSecretFromSecretBundle(response).properties;\n    } finally {\n      span.end();\n    }\n\n    return properties;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listPropertiesOfSecretVersions}.\n   * @param {string} name The name of the KeyVault Secret.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListPropertiesOfSecretVersionsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPropertiesOfSecretVersionsPage(\n    secretName: string,\n    continuationState: PageSettings,\n    options: ListPropertiesOfSecretVersionsOptions = {}\n  ): AsyncIterableIterator<SecretProperties[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetSecretsOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getSecretVersions(\n        this.vaultUrl,\n        secretName,\n        optionsComplete\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(\n          (bundle) => this.getSecretFromSecretBundle(bundle).properties\n        );\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getSecretVersions(\n        continuationState.continuationToken,\n        secretName,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(\n          (bundle) => this.getSecretFromSecretBundle(bundle).properties\n        );\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listPropertiesOfSecretVersions}.\n   * @param {string} name The name of the KeyVault Secret.\n   * @param {ListPropertiesOfSecretVersionsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPropertiesOfSecretVersionsAll(\n    secretName: string,\n    options: ListPropertiesOfSecretVersionsOptions = {}\n  ): AsyncIterableIterator<SecretProperties> {\n    const f = {};\n\n    for await (const page of this.listPropertiesOfSecretVersionsPage(secretName, f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates all versions of the given secret in the vault. The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * for await (const secretProperties of client.listPropertiesOfSecretVersions(\"MySecretName\")) {\n   *   const secret = await client.getSecret(secretProperties.name);\n   *   console.log(\"secret version: \", secret);\n   * }\n   * ```\n   * @param {string} secretName Name of the secret to fetch versions for.\n   * @param {ListPropertiesOfSecretVersionsOptions} [options] The optional parameters.\n   */\n  public listPropertiesOfSecretVersions(\n    secretName: string,\n    options: ListPropertiesOfSecretVersionsOptions = {}\n  ): PagedAsyncIterableIterator<SecretProperties, SecretProperties[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listPropertiesOfSecretVersions\", requestOptions);\n    const updatedOptions: ListPropertiesOfSecretVersionsOptions = {\n      ...requestOptions,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listPropertiesOfSecretVersionsAll(secretName, updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listPropertiesOfSecretVersionsPage(secretName, settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listPropertiesOfSecrets}.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListPropertiesOfSecretsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPropertiesOfSecretsPage(\n    continuationState: PageSettings,\n    options: ListPropertiesOfSecretsOptions = {}\n  ): AsyncIterableIterator<SecretProperties[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetSecretsOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getSecrets(this.vaultUrl, optionsComplete);\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(\n          (bundle) => this.getSecretFromSecretBundle(bundle).properties\n        );\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getSecrets(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(\n          (bundle) => this.getSecretFromSecretBundle(bundle).properties\n        );\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listPropertiesOfSecrets}.\n   * @param {ListPropertiesOfSecretsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPropertiesOfSecretsAll(\n    options: ListPropertiesOfSecretsOptions = {}\n  ): AsyncIterableIterator<SecretProperties> {\n    const f = {};\n\n    for await (const page of this.listPropertiesOfSecretsPage(f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates the latest version of all secrets in the vault.  The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * for await (const secretProperties of client.listPropertiesOfSecrets()) {\n   *   const secret = await client.getSecret(secretProperties.name);\n   *   console.log(\"secret: \", secret);\n   * }\n   * ```\n   * @summary List all secrets in the vault.\n   * @param {ListPropertiesOfSecretsOptions} [options] The optional parameters.\n   */\n  public listPropertiesOfSecrets(\n    options: ListPropertiesOfSecretsOptions = {}\n  ): PagedAsyncIterableIterator<SecretProperties, SecretProperties[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listPropertiesOfSecrets\", requestOptions);\n    const updatedOptions: ListPropertiesOfSecretsOptions = {\n      ...requestOptions,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listPropertiesOfSecretsAll(updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listPropertiesOfSecretsPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listDeletedSecrets}.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListDeletedSecretsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listDeletedSecretsPage(\n    continuationState: PageSettings,\n    options: ListDeletedSecretsOptions = {}\n  ): AsyncIterableIterator<DeletedSecret[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetSecretsOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getDeletedSecrets(\n        this.vaultUrl,\n        optionsComplete\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map((bundle) => this.getSecretFromSecretBundle(bundle));\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getDeletedSecrets(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map((bundle) => this.getSecretFromSecretBundle(bundle));\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listDeletedSecrets}.\n   * @param {ListDeletedSecretsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listDeletedSecretsAll(\n    options: ListDeletedSecretsOptions = {}\n  ): AsyncIterableIterator<DeletedSecret> {\n    const f = {};\n\n    for await (const page of this.listDeletedSecretsPage(f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates the deleted secrets in the vault.  The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * for await (const deletedSecret of client.listDeletedSecrets()) {\n   *   const deletedSecret = await client.getSecret(deletedSecret.name);\n   *   console.log(\"deleted secret: \", deletedSecret);\n   * }\n   * ```\n   * @summary List all secrets in the vault.\n   * @param {ListDeletedSecretsOptions} [options] The optional parameters.\n   */\n  public listDeletedSecrets(\n    options: ListDeletedSecretsOptions = {}\n  ): PagedAsyncIterableIterator<DeletedSecret, DeletedSecret[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listDeletedSecrets\", requestOptions);\n    const updatedOptions: ListDeletedSecretsOptions = {\n      ...requestOptions,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listDeletedSecretsAll(updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listDeletedSecretsPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Shapes the exposed {@link KeyVaultSecret} based on either a received secret bundle or deleted secret bundle.\n   */\n  private getSecretFromSecretBundle(bundle: SecretBundle | DeletedSecretBundle): KeyVaultSecret {\n    const secretBundle = bundle as SecretBundle;\n    const deletedSecretBundle = bundle as DeletedSecretBundle;\n    const parsedId = parseKeyvaultEntityIdentifier(\"secrets\", secretBundle.id);\n\n    const attributes = secretBundle.attributes;\n    delete secretBundle.attributes;\n\n    let resultObject: KeyVaultSecret & DeletedSecret = {\n      value: secretBundle.value,\n      name: parsedId.name,\n      properties: {\n        vaultUrl: parsedId.vaultUrl,\n        expiresOn: (attributes as any).expires,\n        createdOn: (attributes as any).created,\n        updatedOn: (attributes as any).updated,\n        ...secretBundle,\n        ...parsedId,\n        ...attributes\n      }\n    };\n\n    if (deletedSecretBundle.deletedDate) {\n      resultObject.properties.deletedOn = deletedSecretBundle.deletedDate;\n      delete (resultObject.properties as any).deletedDate;\n    }\n\n    if (attributes) {\n      if ((attributes as any).vaultUrl) {\n        delete (resultObject.properties as any).vaultUrl;\n      }\n\n      if (attributes.expires) {\n        delete (resultObject.properties as any).expires;\n      }\n\n      if (attributes.created) {\n        delete (resultObject.properties as any).created;\n      }\n\n      if (attributes.updated) {\n        delete (resultObject.properties as any).updated;\n      }\n    }\n\n    return resultObject;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Creates a span using the tracer that was set by the user\n   * @param {string} methodName The name of the method creating the span.\n   * @param {RequestOptionsBase} [options] The options for the underlying HTTP request.\n   */\n  private createSpan(methodName: string, requestOptions: RequestOptionsBase = {}): Span {\n    const tracer = getTracer();\n    return tracer.startSpan(methodName, requestOptions && requestOptions.spanOptions);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns updated HTTP options with the given span as the parent of future spans,\n   * if applicable.\n   * @param {Span} span The span for the current operation.\n   * @param {RequestOptionsBase} [options] The options for the underlying HTTP request.\n   */\n  private setParentSpan(span: Span, options: RequestOptionsBase = {}): RequestOptionsBase {\n    if (span.isRecording()) {\n      return {\n        ...options,\n        spanOptions: {\n          ...options.spanOptions,\n          parent: span\n        }\n      };\n    } else {\n      return options;\n    }\n  }\n}\n"],"names":["createClientLogger","__extends","coreHttp.getDefaultUserAgentValue","coreHttp.ServiceClient","coreHttp.Serializer","Parameters.vaultBaseUrl","Parameters.keyName0","Parameters.apiVersion","Mappers.KeyCreateParameters","Mappers.KeyBundle","Mappers.KeyVaultError","Mappers.KeyImportParameters","Parameters.keyName1","Mappers.DeletedKeyBundle","Parameters.keyVersion","Mappers.KeyUpdateParameters","Parameters.maxresults","Mappers.KeyListResult","Mappers.BackupKeyResult","Mappers.KeyRestoreParameters","Mappers.KeyOperationsParameters","Mappers.KeyOperationResult","Mappers.KeySignParameters","Mappers.KeyVerifyParameters","Mappers.KeyVerifyResult","Mappers.DeletedKeyListResult","Parameters.secretName0","Mappers.SecretSetParameters","Mappers.SecretBundle","Parameters.secretName1","Mappers.DeletedSecretBundle","Parameters.secretVersion","Mappers.SecretUpdateParameters","Mappers.SecretListResult","Mappers.DeletedSecretListResult","Mappers.BackupSecretResult","Mappers.SecretRestoreParameters","Parameters.includePending","Mappers.CertificateListResult","Parameters.certificateName0","Mappers.DeletedCertificateBundle","Mappers.Contacts","Mappers.CertificateIssuerListResult","Parameters.issuerName","Mappers.CertificateIssuerSetParameters","Mappers.IssuerBundle","Mappers.CertificateIssuerUpdateParameters","Parameters.certificateName1","Mappers.CertificateCreateParameters","Mappers.CertificateOperation","Mappers.CertificateImportParameters","Mappers.CertificateBundle","Mappers.CertificatePolicy","Parameters.certificateVersion","Mappers.CertificateUpdateParameters","Mappers.CertificateOperationUpdateParameter","Mappers.CertificateMergeParameters","Mappers.BackupCertificateResult","Mappers.CertificateRestoreParameters","Mappers.DeletedCertificateListResult","Mappers.StorageListResult","Mappers.DeletedStorageListResult","Parameters.storageAccountName0","Mappers.DeletedStorageBundle","Mappers.StorageBundle","Parameters.storageAccountName1","Mappers.BackupStorageResult","Mappers.StorageRestoreParameters","Mappers.StorageAccountCreateParameters","Mappers.StorageAccountUpdateParameters","Mappers.StorageAccountRegenerteKeyParameters","Mappers.SasDefinitionListResult","Mappers.DeletedSasDefinitionListResult","Parameters.sasDefinitionName","Mappers.DeletedSasDefinitionBundle","Mappers.SasDefinitionBundle","Mappers.SasDefinitionCreateParameters","Mappers.SasDefinitionUpdateParameters","ExpiringAccessTokenCache","HttpHeaders","Constants","BaseRequestPolicy","delay","Poller","update","cancel","toString","url.parse","isTokenCredential","signingPolicy","createPipelineFromOptions","operationOptionsToRequestOptionsBase","__asyncValues","parseKeyvaultEntityIdentifier","getTracer"],"mappings":"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"}