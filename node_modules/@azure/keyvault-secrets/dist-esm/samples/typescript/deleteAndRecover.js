"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var src_1 = require("../../src");
var identity_1 = require("@azure/identity");
function delay(t, value) {
    return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });
}
exports.delay = delay;
function main() {
    var e_1, _a, e_2, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var credential, vaultName, url, client, bankAccountSecretName, storageAccountSecretName, deletePoller, _c, _d, deletedSecret, e_1_1, recoverPoller, recoveredSecret, _e, _f, deletedSecret, e_2_1;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    credential = new identity_1.DefaultAzureCredential();
                    vaultName = process.env["KEYVAULT_NAME"] || "<keyvault-name>";
                    url = "https://" + vaultName + ".vault.azure.net";
                    client = new src_1.SecretClient(url, credential);
                    bankAccountSecretName = "BankAccountPassword11";
                    storageAccountSecretName = "StorageAccountPassword11";
                    // Create our secrets
                    console.log("Creating our secrets");
                    return [4 /*yield*/, client.setSecret(bankAccountSecretName, "ABC123")];
                case 1:
                    _g.sent();
                    return [4 /*yield*/, client.setSecret(storageAccountSecretName, "XYZ789")];
                case 2:
                    _g.sent();
                    return [4 /*yield*/, delay(5000)];
                case 3:
                    _g.sent();
                    // Oops, what happens if we delete the wrong one?
                    console.log("Deleting secret: ", bankAccountSecretName);
                    return [4 /*yield*/, client.beginDeleteSecret(bankAccountSecretName)];
                case 4:
                    deletePoller = _g.sent();
                    return [4 /*yield*/, deletePoller.pollUntilDone()];
                case 5:
                    _g.sent();
                    console.log("Showing deleted secrets");
                    _g.label = 6;
                case 6:
                    _g.trys.push([6, 11, 12, 17]);
                    _c = tslib_1.__asyncValues(client.listDeletedSecrets());
                    _g.label = 7;
                case 7: return [4 /*yield*/, _c.next()];
                case 8:
                    if (!(_d = _g.sent(), !_d.done)) return [3 /*break*/, 10];
                    deletedSecret = _d.value;
                    console.log(deletedSecret);
                    _g.label = 9;
                case 9: return [3 /*break*/, 7];
                case 10: return [3 /*break*/, 17];
                case 11:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 17];
                case 12:
                    _g.trys.push([12, , 15, 16]);
                    if (!(_d && !_d.done && (_a = _c.return))) return [3 /*break*/, 14];
                    return [4 /*yield*/, _a.call(_c)];
                case 13:
                    _g.sent();
                    _g.label = 14;
                case 14: return [3 /*break*/, 16];
                case 15:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 16: return [7 /*endfinally*/];
                case 17:
                    // That's okay, it's not gone until it's fully deleted (purged)
                    // Note: this only works if soft-delete is enabled on your vault
                    console.log("Recovering secret");
                    return [4 /*yield*/, client.beginRecoverDeletedSecret(bankAccountSecretName)];
                case 18:
                    recoverPoller = _g.sent();
                    return [4 /*yield*/, recoverPoller.pollUntilDone()];
                case 19:
                    recoveredSecret = _g.sent();
                    console.log(recoveredSecret);
                    // To actually delete it, we delete and then purge the secret
                    // Delete the secret
                    console.log("about to delete");
                    return [4 /*yield*/, client.beginDeleteSecret(bankAccountSecretName)];
                case 20:
                    deletePoller = _g.sent();
                    return [4 /*yield*/, deletePoller.pollUntilDone()];
                case 21:
                    _g.sent();
                    // Purge the deleted secret
                    console.log("about to purge");
                    return [4 /*yield*/, client.purgeDeletedSecret(bankAccountSecretName)];
                case 22:
                    _g.sent();
                    return [4 /*yield*/, delay(30000)];
                case 23:
                    _g.sent();
                    _g.label = 24;
                case 24:
                    _g.trys.push([24, 29, 30, 35]);
                    _e = tslib_1.__asyncValues(client.listDeletedSecrets());
                    _g.label = 25;
                case 25: return [4 /*yield*/, _e.next()];
                case 26:
                    if (!(_f = _g.sent(), !_f.done)) return [3 /*break*/, 28];
                    deletedSecret = _f.value;
                    console.log(deletedSecret);
                    _g.label = 27;
                case 27: return [3 /*break*/, 25];
                case 28: return [3 /*break*/, 35];
                case 29:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 35];
                case 30:
                    _g.trys.push([30, , 33, 34]);
                    if (!(_f && !_f.done && (_b = _e.return))) return [3 /*break*/, 32];
                    return [4 /*yield*/, _b.call(_e)];
                case 31:
                    _g.sent();
                    _g.label = 32;
                case 32: return [3 /*break*/, 34];
                case 33:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 34: return [7 /*endfinally*/];
                case 35: 
                // If we don't want to purge the secret later, we don't need to wait until this finishes
                return [4 /*yield*/, client.beginDeleteSecret(storageAccountSecretName)];
                case 36:
                    // If we don't want to purge the secret later, we don't need to wait until this finishes
                    _g.sent();
                    return [2 /*return*/];
            }
        });
    });
}
main().catch(function (err) {
    console.log("error code: ", err.code);
    console.log("error message: ", err.message);
    console.log("error stack: ", err.stack);
});
//# sourceMappingURL=deleteAndRecover.js.map