// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __assign, __awaiter, __extends, __generator } from "tslib";
import { delay } from "@azure/core-http";
import { Poller } from "@azure/core-lro";
import { makeDeleteSecretPollOperation } from "./operation";
/**
 * Class that deletes a poller that waits until a secret finishes being deleted
 */
var DeleteSecretPoller = /** @class */ (function (_super) {
    __extends(DeleteSecretPoller, _super);
    function DeleteSecretPoller(options) {
        var _this = this;
        var client = options.client, name = options.name, requestOptions = options.requestOptions, _a = options.intervalInMs, intervalInMs = _a === void 0 ? 2000 : _a, resumeFrom = options.resumeFrom;
        var state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        var operation = makeDeleteSecretPollOperation(__assign(__assign({}, state), { name: name,
            requestOptions: requestOptions,
            client: client }));
        _this = _super.call(this, operation) || this;
        _this.intervalInMs = intervalInMs;
        return _this;
    }
    /**
     * The method used by the poller to wait before attempting to update its operation.
     * @memberof DeleteSecretPoller
     */
    DeleteSecretPoller.prototype.delay = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, delay(this.intervalInMs)];
            });
        });
    };
    return DeleteSecretPoller;
}(Poller));
export { DeleteSecretPoller };
//# sourceMappingURL=poller.js.map